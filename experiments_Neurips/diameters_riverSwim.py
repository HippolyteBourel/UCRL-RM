import numpy as np

Dqs6 =  [[ 1.6666387,4.75910272 , 6.38938185 , 6.62437063 ,16.3533449 ,  3.33274378],
 [ 1.6666387  ,18.68803754 , 7.58903283 , 6.69759954,  6.66443269,  3.33274378]]

Dqs12 = [[ 1.66666655,4.7615751, 6.39341181,6.62682401,6.66051003,6.66556975
, 6.66641328,6.666588,  6.66663179,6.66665199, 42.33200976,3.3333224 ],
 [ 1.66666655, 44.66923058, 11.23585996,7.2173363, 6.72523722,6.67067138
, 6.665396,  6.66582279,6.66627278,6.6664621, 6.66661285,3.3333224 ]]

Dqs20 = [[ 1.66666667,4.76188576,6.39440429,6.62761338,6.66098094,6.66580024
, 6.66651776,6.6666341, 6.66665566,6.66666246,6.66666458,6.66666559
, 6.6666661, 6.66666641,6.66666653,6.6666666, 6.66666663,6.66666665
,76.97849998,3.33333327],
 [ 1.66666667 ,79.32653875, 16.09836384,7.91032117,6.82421978,6.68481357
, 6.66741641,6.66611143,6.66631401,6.66646799,6.66657878,6.66662117
, 6.66664314,6.66665447,6.66666032,6.66666335,6.66666493,6.66666576
, 6.66666637,3.33333327]]

Dqs40 =  [[  1.66666667, 4.76190475, 6.39455681, 6.62779127, 6.66111042
,6.66587125, 6.66655215, 6.66664988, 6.66666402, 6.66666618
,  6.66666654, 6.66666662, 6.66666664, 6.66666666, 6.66666666
,  6.66666666, 6.66666667, 6.66666667, 6.66666667, 6.66666667
,  6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
,  6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
,  6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
,  6.66666667, 6.66666667, 6.66666667 ,163.61371437, 3.33333333],
 [  1.66666667, 165.97085895,28.26349469, 9.64278706, 7.07167516
,  6.7201698,  6.67246744, 6.66683303, 6.6664171,  6.66648272
,  6.66658088, 6.66662147, 6.66664318, 6.66665447, 6.66666032
,  6.66666335, 6.66666493, 6.66666576, 6.66666619, 6.66666641
,  6.66666653, 6.6666666,  6.66666663, 6.66666665, 6.66666666
,  6.66666666, 6.66666666, 6.66666666, 6.66666667, 6.66666667
,  6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
,  6.66666667, 6.66666667, 6.66666667, 6.66666667, 3.33333333]]

Dqs70 = [[ 1.66666667, 4.76190476, 6.39455782, 6.62779397, 6.66111341
,  6.66587334, 6.66655333, 6.66665047, 6.66666435, 6.66666633
, 6.66666662, 6.66666666, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 293.57960358, 3.33333333],
 [ 1.66666667,295.94282667,46.50928274,12.24146726, 7.44478772
, 6.77320271, 6.68004395, 6.66791549, 6.66657173, 6.66650481
, 6.66658404, 6.66662192, 6.66664324, 6.66665448, 6.66666032
, 6.66666335, 6.66666493, 6.66666576, 6.66666619, 6.66666641
, 6.66666653, 6.6666666, 6.66666663, 6.66666665, 6.66666666
, 6.66666666, 6.66666666, 6.66666666, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 3.33333333]]


Dqs100 = [[ 1.66666667, 4.76190476, 6.39455782, 6.62779397, 6.66111342
, 6.66587335, 6.66655334, 6.66665048, 6.66666435, 6.66666634
, 6.66666662, 6.66666666, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 423.54968656, 3.33333333]
,[ 1.66666667,425.93214139,64.75663778,14.84459835, 7.81598928
,6.82623553, 6.68762044, 6.66899789, 6.66672636, 6.6665269
, 6.66658719, 6.66662237, 6.66664331, 6.66665449, 6.66666032
, 6.66666335, 6.66666493, 6.66666576, 6.66666619, 6.66666641
, 6.66666653, 6.6666666,  6.66666663, 6.66666665, 6.66666666
, 6.66666666, 6.66666666, 6.66666666, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 6.66666667
, 6.66666667, 6.66666667, 6.66666667, 6.66666667, 3.33333333]]

def make_Ksa_riverSwim(S):
	res = np.ones((S, 2))
	for s in range(S):
		if (s == 0) or (s == S-1):
			res[s, 0] = 2
		else:
			res[s, 0] = 3
	return res

for Dqs in [Dqs6, Dqs12, Dqs20, Dqs40, Dqs70, Dqs100]:
	S = len(Dqs[0])
	A = 2
	Ksa = make_Ksa_riverSwim(S)
	Ds = [max(Dqs[0][i], Dqs[1][i]) for i in range(S)]
	# compute res0 = sqrt(sum(Ds^2))
	res0 = np.sqrt(S*A*sum([Ds[i]**2 for i in range(S)]))
	# compute res1 = sqrt(c'M)
	res1 = 0
	for s in range(S):
		res1 += Ksa[s, 0] * Ds[s]**2 + Ksa[s, 1] * Ds[s]**2
	res1 = np.sqrt(res1)
	print("For O = ", S, " sqrt(OAsum(Ds^2)) = ", res0, " and sqrt(c\'M) = ", res1)#, "  and sqrt(sum Ksa) = ", res2)

Dcp = [19.7, 45.7, 80.3, 167, 296.9, 426.9]
Q = 2
A = 2

l_S = [6, 12, 20, 40, 70, 100]

for i in range(len(l_S)):
	S = l_S[i]
	print("For S = ", S, " Dcp OQ sqrt(A) = ", Dcp[i]*S*Q*np.sqrt(A))
	# compute res2 = sqrt(sum_qsa Ksa) Dcp
	res2 = 0
	for s in range(S):
		res2 += Ksa[s, 0] + Ksa[s, 1]
	res2 = np.sqrt(Q * res2) * Dcp[i]
	print(" \nand Dcp sqrt(sum_qsa Ksa) = ", res2)